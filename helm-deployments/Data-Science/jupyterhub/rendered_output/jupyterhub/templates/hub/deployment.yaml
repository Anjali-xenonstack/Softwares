---
# Source: jupyterhub/templates/hub/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-jupyterhub-hub
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jupyterhub
    app.kubernetes.io/version: 4.1.6
    helm.sh/chart: jupyterhub-8.0.1
    app.kubernetes.io/component: hub
spec:
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: jupyterhub
      app.kubernetes.io/component: hub
  template:
    metadata:
      annotations:
        checksum/hub-config: 1e56ba2d0a6c66bf44822502e7ffa717f1a6ba6c0e44cbf90be238c8c6f1fbf2
        checksum/hub-secret: 832edd3e3f96a78e729414a9d980e5628366c1a56deb72cb0b563ba5f99b3404
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: jupyterhub
        app.kubernetes.io/version: 4.1.6
        helm.sh/chart: jupyterhub-8.0.1
        app.kubernetes.io/component: hub
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
    spec:
      serviceAccountName: release-name-jupyterhub-hub
      imagePullSecrets:
        - name: test
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: jupyterhub
                    app.kubernetes.io/component: hub
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: [] 
      initContainers:
        # NOTE: The value postgresql.image is not available unless postgresql.enabled is not set. We could change this to use os-shell if
        # it had the binary wait-for-port.
        # This init container is for avoiding CrashLoopback errors in the Hub container because the PostgreSQL container is not ready
        - name: wait-for-db
          image: docker.io/bitnami/postgresql:17.0.0-debian-12-r11
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              set -o errexit
              set -o nounset
              set -o pipefail

              . /opt/bitnami/scripts/libos.sh
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libpostgresql.sh

              check_postgresql_connection() {
                  echo "SELECT 1" | postgresql_remote_execute "$POSTGRESQL_CLIENT_DATABASE_HOST" "$POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER" "$POSTGRESQL_CLIENT_DATABASE_NAME" "$POSTGRESQL_CLIENT_POSTGRES_USER" "$POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD"
              }

              info "Connecting to the PostgreSQL instance $POSTGRESQL_CLIENT_DATABASE_HOST:$POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER"
              if ! retry_while "check_postgresql_connection"; then
                  error "Could not connect to the database server"
                  return 1
              else
                  info "Connected to the PostgreSQL instance"
              fi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: POSTGRESQL_CLIENT_DATABASE_HOST
              value: release-name-postgresql
            - name: POSTGRESQL_CLIENT_DATABASE_NAME
              value: bitnami_jupyterhub
            - name: POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
            - name: POSTGRESQL_CLIENT_POSTGRES_USER
              value: "bn_jupyterhub"
      containers:
        - name: hub
          image: docker.io/bitnami/jupyter-base-notebook:4.1.6-debian-12-r9
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - jupyterhub
          args:
            - --config
            - /etc/jupyterhub/jupyterhub_config.py
            - --upgrade-db
          ports:
            - name: http
              containerPort: 8081
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: "release-name"
            - name: PROXY_API_SERVICE_PORT
              value: "8001"
            - name: HUB_SERVICE_PORT
              value: "8081"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: release-name-jupyterhub-hub
                  key: proxy-token
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: password
          envFrom:
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /hub/health
              port: http
          livenessProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /hub/health
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - mountPath: /etc/jupyterhub/jupyterhub_config.py
              subPath: jupyterhub_config.py
              name: config
            - mountPath: /etc/jupyterhub/z2jh.py
              subPath: z2jh.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/secret/
              name: secret
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: config
          configMap:
            name: release-name-jupyterhub-hub
        - name: secret
          secret:
            secretName: release-name-jupyterhub-hub
