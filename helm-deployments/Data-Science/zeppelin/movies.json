{
    "angularObjects": {
        "2BBMG36TG": [],
        "2BBP93GXN": [],
        "2BCWB5AC5": [],
        "2BD7D57HD": [],
        "2BDTSW1AY": [],
        "2BDX9CDXQ": [],
        "2BDYERHPT": [],
        "2BE6JMXSW": [],
        "2BE7G5CWR": [],
        "2BEDYAA2F": [],
        "2BEEMQXUG": [],
        "2BEPWM2HZ": [],
        "2BF8NFT9N": [],
        "2BFDJ213C": []
    },
    "config": {
        "looknfeel": "default"
    },
    "id": "2BCD1FSS8",
    "info": {},
    "name": "Movie Recommendations",
    "paragraphs": [
        {
            "$$hashKey": "object:50",
            "config": {
                "colWidth": 12,
                "editorMode": "ace/mode/scala",
                "enabled": true,
                "graph": {
                    "groups": [],
                    "height": 300,
                    "keys": [],
                    "mode": "table",
                    "optionOpen": false,
                    "scatter": {},
                    "values": []
                }
            },
            "dateCreated": "Feb 25, 2016 10:40:17 PM",
            "dateFinished": "Feb 25, 2016 10:41:58 PM",
            "dateStarted": "Feb 25, 2016 10:41:48 PM",
            "dateUpdated": "Feb 25, 2016 10:41:48 PM",
            "focus": true,
            "id": "20160225-224017_1897590965",
            "jobName": "paragraph_1456440017507_-1934010228",
            "progressUpdateIntervalMs": 500,
            "result": {
                "code": "SUCCESS",
                "msg": "Mean Squared Error = 0.0154695740609\n",
                "type": "TEXT"
            },
            "settings": {
                "forms": {},
                "params": {}
            },
            "status": "FINISHED",
            "text": "%pyspark\n\n# Based on http://spark.apache.org/docs/1.5.2/mllib-collaborative-filtering.html\n#\n# Change these to where you want to save the model to. The Kubernetes cluster\n# must be configured with storage-rw scopes in order to access the bucket.\n\nmodelBucket = \"\"\nmodelPath = \"gs://{bucket}/mllib/als/test.model\".format(bucket = modelBucket)\n\nimport urllib2\nfrom pyspark.mllib.recommendation import ALS, MatrixFactorizationModel, Rating\n\n# Load and parse the data. This example uses a direct URL fetch to avoid running afoul\n# of redistribution issues with this interesting movie recommendation database. If you\n# wanted to, though, you could use:\n#  data = sc.textFile(\"gs://a-path-to-gcs/some-data-file.txt\")\n# to access a Google Cloud Storage File, rather than this.\ndata = sc.parallelize(urllib2.urlopen(\"http://files.grouplens.org/datasets/movielens/ml-100k/u.data\").readlines())\nratings = data.map(lambda l: l.split('\\t')).map(lambda l: Rating(int(l[0]), int(l[1]), float(l[2])))\n\n# Build the recommendation model using Alternating Least Squares\nrank = 100\nnumIterations = 10\nmodel = ALS.train(ratings, rank, numIterations)\n\n# Evaluate the model on training data\ntestdata = ratings.map(lambda p: (p[0], p[1]))\npredictions = model.predictAll(testdata).map(lambda r: ((r[0], r[1]), r[2]))\nratesAndPreds = ratings.map(lambda r: ((r[0], r[1]), r[2])).join(predictions)\nMSE = ratesAndPreds.map(lambda r: (r[1][0] - r[1][1])**2).mean()\nprint(\"Mean Squared Error = \" + str(MSE))\n\n# Save and load model\nif modelBucket:\n  model.save(sc, modelPath)\n  sameModel = MatrixFactorizationModel.load(sc, modelPath)"
        },
        {
            "$$hashKey": "object:51",
            "config": {
                "colWidth": 12,
                "editorMode": "ace/mode/scala",
                "enabled": true,
                "graph": {
                    "groups": [],
                    "height": 300,
                    "keys": [],
                    "mode": "table",
                    "optionOpen": false,
                    "scatter": {},
                    "values": []
                },
                "tableHide": false
            },
            "dateCreated": "Feb 25, 2016 10:40:17 PM",
            "dateUpdated": "Feb 25, 2016 10:40:17 PM",
            "id": "20160225-224017_1893400847",
            "jobName": "paragraph_1456440017509_-1936318721",
            "progressUpdateIntervalMs": 500,
            "settings": {
                "forms": {},
                "params": {}
            },
            "status": "READY"
        }
    ]
}
