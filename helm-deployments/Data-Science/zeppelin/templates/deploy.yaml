apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zeppelin.fullname" . }}-server
  labels:
    app: zeppelin-server
{{- with .Values.labels }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      workspace_id: {{ .Values.workspace_id }}
      user_id: {{ .Values.user_id }}
      user_name: {{ .Values.user_name }}

{{- include "zeppelin.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        workspace_id: {{ .Values.workspace_id }}
        user_id: {{ .Values.user_id }}
        user_name: {{ .Values.user_name }}
{{- include "zeppelin.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "zeppelin.serviceAccountName" . }}
      volumes:
        - name: config-init-volume
          configMap:
            name: {{ include "zeppelin.fullname" . }}-user-conf
        - name: zeppelin-server-notebook-volume
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "zeppelin.fullname" . }}-pvc
        {{- else }}
          emptyDir: {}
        {{- end }}
        - name: nginx-conf
          configMap:
            name: {{ include "zeppelin.fullname" . }}-zeppelin-server-conf
            items:
            - key: nginx.conf
              path: nginx.conf
        {{- if .Values.authentication.enabled }}
        - name: user-config
          emptyDir: {}
        {{- end }}
      {{- if .Values.authentication.enabled }}
      initContainers:
      - name: {{ .Chart.Name }}-init-config
        image: docker.io/busybox:1.33
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: ZEPPELIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "zeppelin.fullname" . }}-secret
                key: password
          - name: ADMIN_USER_NAME
            valueFrom:
              secretKeyRef:
                name: {{ include "zeppelin.fullname" . }}-secret
                key: username
        command: ["/bin/sh", "-c"]
        args:
          - >
            cp /etc/shiro.ini /etc/shi.ini;
            sed -i 's|ADMIN_USER_NAME|'$ADMIN_USER_NAME'|g;s|ADMIN_PASSWORD|'$ZEPPELIN_PASSWORD'|g' /etc/shi.ini;
            cp /etc/shi.ini /root/shiro.ini;


        volumeMounts:
          - name: config-init-volume
            mountPath: /etc/shiro.ini
            subPath: shiro.ini
          - name: user-config
            mountPath: /root
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["sh", "-c", "$(ZEPPELIN_HOME)/bin/zeppelin.sh"]
          lifecycle:
            preStop:
              exec:
                # SIGTERM triggers a quick exit; gracefully terminate instead
                command: ["sh", "-c", "ps -ef | grep org.apache.zeppelin.server.ZeppelinServer | grep -v grep | awk '{print $2}' | xargs kill"]
          ports:
          - name: http
            containerPort: 8080
          - name: https
            containerPort: 8443
          - name: rpc
            containerPort: 12320
          env:
          # - name: ZEPPELIN_PASSWORD
          #   valueFrom:
          #     secretKeyRef:
          #       name:  {{ include "zeppelin.fullname" . }}-secret
          #       key: password
          # - name: ADMIN_USER_NAME
          #   valueFrom:
          #     secretKeyRef:
          #       name: {{ include "zeppelin.fullname" . }}-secret
          #       key: username
          - name: POD_UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
          - configMapRef:
              name: {{ include "zeppelin.fullname" . }}-server-conf-map
          volumeMounts:
           - name: zeppelin-server-notebook-volume     # configure this to persist notebook
             mountPath: /zeppelin/notebook
          {{- if .Values.authentication.enabled }}
           - name: user-config
             mountPath: /opt/zeppelin/conf/shiro.ini
             subPath: shiro.ini
          {{- end }}
        #  - name: zeppelin-server-conf                # configure this to persist Zeppelin configuration
        #    mountPath: /zeppelin/conf
        #  - name: zeppelin-server-custom-k8s          # configure this to mount customized Kubernetes spec for interpreter
        #    mountPath: /zeppelin/k8s
        - name: zeppelin-server-gateway
          image: docker.io/nginx:1.14.0
          command: ["/bin/sh", "-c"]
          env:
          - name: SERVICE_DOMAIN
            valueFrom:
              configMapKeyRef:
                name: {{ include "zeppelin.fullname" . }}-server-conf-map
                key: SERVICE_DOMAIN
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: 8080
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: 8080
          args:
            - cp -f /tmp/conf/nginx.conf /etc/nginx/nginx.conf;
              sed -i -e "s/SERVICE_DOMAIN/$SERVICE_DOMAIN/g" /etc/nginx/nginx.conf;
              sed -i -e "s/NAMESP  - cp -f /tmp/conf/nginx.conf /etc/nginx/nginx.conf;
              sed -i -e "s/SERVICE_DOMAIN/$SERVICE_DOMAIN/g" /etc/nginx/nginx.conf;
              sed -i -e "s/NAMESPACE/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/g" /etc/nginx/nginx.conf;
              cat /etc/nginx/nginx.conf;
              /usr/sbin/nginxACE/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/g" /etc/nginx/nginx.conf;
              cat /etc/nginx/nginx.conf;
              /usr/sbin/nginx
          volumeMounts:
            - name: nginx-conf
              mountPath: /tmp/conf
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                # SIGTERM triggers a quick exit; gracefully terminate instead
                command: ["/usr/sbin/nginx", "-s", "quit"]
        - name: dnsmasq  # nginx requires dns resolver for dynamic dns resolution
          image: "docker.io/janeczku/go-dnsmasq:release-1.0.5"
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 100m
              memory: 100Mi
          args:
            - --listen
            - "127.0.0.1:53"
            - --default-resolver
            - --append-search-domains
            - --hostsfile=/etc/hosts
            - --verbose
