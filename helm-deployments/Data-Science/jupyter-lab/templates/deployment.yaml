apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-jupyter
  labels:
    workspace_id: "{{ .Values.workspace_id}}"
    user_id: "{{ .Values.user_id}}"
    user_name: "{{ .Values.user_name}}"
    app: {{ template "jupyter.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    type: softwares

{{- with .Values.labels }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ template "jupyter.name" . }}
      release: {{ .Release.Name }}
      workspace_id: "{{ .Values.workspace_id}}"
      user_id: "{{ .Values.user_id}}"
      user_name: "{{ .Values.user_name}}"
{{- with .Values.selector }}
{{ toYaml . | indent 6 }}
{{- end }}      
  replicas: 1
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-jupyter
        app: {{ template "jupyter.name" . }}
        release: {{ .Release.Name }}
        type: softwares
        workspace_id: "{{ .Values.workspace_id}}"
        user_id: "{{ .Values.user_id}}"
        user_name: "{{ .Values.user_name}}"
{{- with .Values.selector }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      containers:
        - name: jupyter
          image: {{ .Values.jupyter.image }}:{{ .Values.jupyter.tag }}
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 8888
              name: jupyterport
          env:
          # - name: jupyter_password
          #   value: "{{ .Values.jupyter.password }}"
          # - name: BUCKET_NAME
          #   value: "{{ .Values.BUCKET_NAME }}"
          # - name: WORK_DIR_NAME
          #   value: "{{ .Values.WORK_DIR_NAME }}"
          # - name: AWS_ACCESS_KEY_ID
          #   value: "{{ .Values.AWS_ACCESS_KEY }}"
          # - name: AWS_SECRET_ACCESS_KEY
          #   value: "{{ .Values.AWS_ACCESS_SECRET }}"
          - name: JUPYTER_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-jupyter-secret
                key: token
          - name: JUPYTER_ENABLE_LAB
            value: {{ .Values.env.jupyterEnableLab | quote }}

          volumeMounts:
          - mountPath: /home/jovyan/work
            name: data-jupyter
          resources:
{{ toYaml .Values.jupyter.resources | indent 12 }}
          readinessProbe:
            httpGet:
              path: /
              port: 8888
            #initialDelaySeconds: {{ .Values.jupyter.initialDelaySeconds }}
            #timeoutSeconds: {{ .Values.jupyter.timeoutSeconds }}
      # nodeSelector:
      #   kops.k8s.io/instancegroup: nodes
      volumes:
        - name: data-jupyter
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-jupyter
